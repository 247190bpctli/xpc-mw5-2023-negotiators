// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eshopBackend.DAL;

#nullable disable

namespace eshopBackend.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230420203005_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("eshopBackend.DAL.Entities.CartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ManufacturerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Origin")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.PlacedOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("longtext");

                    b.Property<int?>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PlacedOrders");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CartEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PlacedOrderEntityId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CartEntityId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PlacedOrderEntityId");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProductEntityId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Stars")
                        .HasColumnType("double");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ProductInCartEntity", b =>
                {
                    b.HasBaseType("eshopBackend.DAL.Entities.ProductEntity");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ProductInCartEntity");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ProductEntity", b =>
                {
                    b.HasOne("eshopBackend.DAL.Entities.CartEntity", null)
                        .WithMany("Products")
                        .HasForeignKey("CartEntityId");

                    b.HasOne("eshopBackend.DAL.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("eshopBackend.DAL.Entities.ManufacturerEntity", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("eshopBackend.DAL.Entities.PlacedOrderEntity", null)
                        .WithMany("Products")
                        .HasForeignKey("PlacedOrderEntityId");

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ReviewEntity", b =>
                {
                    b.HasOne("eshopBackend.DAL.Entities.ProductEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductEntityId");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.CartEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.PlacedOrderEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("eshopBackend.DAL.Entities.ProductEntity", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
